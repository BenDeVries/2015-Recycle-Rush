// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4915.MecanumDrive;
    
import org.usfirst.frc4915.MecanumDrive.subsystems.Elevator;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CANTalon.ControlMode;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.livewindow.LiveWindowSendable;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon mecanumDriveControls1LeftFront1;
    public static CANTalon mecanumDriveControls1LeftRear2;
    public static CANTalon mecanumDriveControls1RightFront3;
    public static CANTalon mecanumDriveControls1RightRear4;
    public static RobotDrive mecanumDriveControls1RobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //Elevator
    public static Elevator elevator;
    
    //Analog potentiometer
    private static int inputPort = 1; // Analog input port.
	private static int scale = 1; // Scaling for the 
    public static AnalogPotentiometer potentiometer;
	
    // Gyroscope
    public static Gyro gyro;
    
    // Air Compressor
    public static Compressor airCompressor;
    
    // Grabber Subsystem Double Solenoid
    public static DoubleSolenoid grabberSolenoid;
    
    // The Pneumatic Control Module's CAN Node ID. Use 10 for 4915. Use 20 for 9999.
    public final static int PCM_NODE_ID = 10;
    
    public static void init() {
		
	    // Mecanum wheel instantiation
		mecanumDriveControls1LeftFront1 = new CANTalon(10); 
		mecanumDriveControls1LeftRear2 = new CANTalon(11);
		mecanumDriveControls1RightFront3 = new CANTalon(12);
		mecanumDriveControls1RightRear4 = new CANTalon(13);
		mecanumDriveControls1LeftFront1.changeControlMode(ControlMode.Speed);
		mecanumDriveControls1LeftRear2.changeControlMode(ControlMode.Speed);
		mecanumDriveControls1RightFront3.changeControlMode(ControlMode.Speed);
		mecanumDriveControls1RightRear4.changeControlMode(ControlMode.Speed);
		mecanumDriveControls1LeftFront1.setFeedbackDevice(CANTalon.FeedbackDevice.QuadEncoder);
		mecanumDriveControls1LeftRear2.setFeedbackDevice(CANTalon.FeedbackDevice.QuadEncoder);
		mecanumDriveControls1RightFront3.setFeedbackDevice(CANTalon.FeedbackDevice.QuadEncoder);
		mecanumDriveControls1RightRear4.setFeedbackDevice(CANTalon.FeedbackDevice.QuadEncoder);
		
		// Gyro instantiation
		gyro = new Gyro(0);
		
		// Compressor instantiation
		airCompressor = new Compressor(PCM_NODE_ID);
		
		// Double Solenoid instantiation. Wiring: 0 --> Forward channel (extended). 1 --> Reverse channel (retracted).
		grabberSolenoid = new DoubleSolenoid(PCM_NODE_ID,0,1); // Uses 10 as the Node ID for the PCM.
		
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	    
		//Elevator instantiation
		elevator = new Elevator();
	    
	    mecanumDriveControls1RobotDrive41 = new RobotDrive(mecanumDriveControls1LeftFront1, 
	    												   mecanumDriveControls1LeftRear2,
	    												   mecanumDriveControls1RightFront3, 
	    												   mecanumDriveControls1RightRear4);
	    
	    mecanumDriveControls1RobotDrive41.setSafetyEnabled(true);
	    mecanumDriveControls1RobotDrive41.setExpiration(0.1);
	    mecanumDriveControls1RobotDrive41.setSensitivity(0.5);
	    mecanumDriveControls1RobotDrive41.setMaxOutput(1.0);
	
	
	    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	    
	    mecanumDriveControls1RobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
	    mecanumDriveControls1RobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
	    
	    // Analog Potentiometer instantiation
	    
		AnalogPotentiometer potentiometer = new AnalogPotentiometer(inputPort, scale);
		
		//LiveWindow.addActuator("Mecanum Drive Controls 1", "Left Front 1", (LiveWindowSendable) mecanumDriveControls1LeftFront1);
	    
		   
	    //LiveWindow.addActuator("Mecanum Drive Controls 1", "Left Rear 2", (LiveWindowSendable) mecanumDriveControls1LeftRear2);
	    
	   
	    //LiveWindow.addActuator("Mecanum Drive Controls 1", "Right Front 3", (LiveWindowSendable) mecanumDriveControls1RightFront3);
	    
	    
	    //LiveWindow.addActuator("Mecanum Drive Controls 1", "Right Rear 4", (LiveWindowSendable) mecanumDriveControls1RightRear4);
    }
}
