// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4915.MecanumDrive;

import org.usfirst.frc4915.MecanumDrive.commands.AutonomousCommand;
import org.usfirst.frc4915.MecanumDrive.commands.CloseAllGrabbers;
import org.usfirst.frc4915.MecanumDrive.commands.CloseGrabber;
import org.usfirst.frc4915.MecanumDrive.commands.CloseSmallGrabber;
import org.usfirst.frc4915.MecanumDrive.commands.DriveStraight;
import org.usfirst.frc4915.MecanumDrive.commands.ElevatorJumpToPosition;
import org.usfirst.frc4915.MecanumDrive.commands.IntermediateOpen;
import org.usfirst.frc4915.MecanumDrive.commands.MoveStraightPositionModeCommand;
import org.usfirst.frc4915.MecanumDrive.commands.OpenGrabber;
import org.usfirst.frc4915.MecanumDrive.commands.ToggleDriveMode;
import org.usfirst.frc4915.MecanumDrive.subsystems.DriveTrain;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	// // CREATING BUTTONS
	// One type of button is a joystick button which is any button on a
	// joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	// // TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());

	/**
	 * JOYSTICKS
	 */
	public Joystick driveStick;
	public Joystick elevatorStick;
	
	/**
	 * JOYSTICK BUTTONS (ELEVATOR)
	 */
	public JoystickButton elevatorJumpToPositionZero;
	public JoystickButton elevatorJumpToPositionOne;
	public JoystickButton elevatorJumpToPositionTwo;
	public JoystickButton elevatorJumpToPositionThree;
	public JoystickButton elevatorJumpToPositionFour;
	public JoystickButton elevatorJumpToPositionFive;
	public JoystickButton elevatorJumpToPositionSix;
	
	/**
	 * JOYSTICK BUTTONS (GRABBER)
	 */
	public JoystickButton grabberOpen;
	public JoystickButton grabberClosed;
	public JoystickButton grabberIntermediate;

	public OI() {

		/**
		 * JOYSTICKS
		 */
		driveStick = new Joystick(0);
		elevatorStick = new Joystick(1);

		/**
		 * JOYSTICK BUTTONS (ELEVATOR)
		 */
		elevatorJumpToPositionZero = new JoystickButton(elevatorStick, 2);
		elevatorJumpToPositionZero.whenPressed(new ElevatorJumpToPosition(0));
		elevatorJumpToPositionOne = new JoystickButton(elevatorStick, 7);
		elevatorJumpToPositionOne.whenPressed(new ElevatorJumpToPosition(1));
		elevatorJumpToPositionTwo = new JoystickButton(elevatorStick, 8);
		elevatorJumpToPositionTwo.whenPressed(new ElevatorJumpToPosition(2));
		elevatorJumpToPositionThree = new JoystickButton(elevatorStick, 9);
		elevatorJumpToPositionThree.whenPressed(new ElevatorJumpToPosition(3));
		elevatorJumpToPositionFour = new JoystickButton(elevatorStick, 10);
		elevatorJumpToPositionFour.whenPressed(new ElevatorJumpToPosition(4));

		/**
		 * AUTONOMOUS COMMAND
		 */
		SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
		
		/**
		 * DRIVE STRAIGHT
		 */
		SmartDashboard.putData("Move Straight 9 feet", new MoveStraightPositionModeCommand(9));
		SmartDashboard.putData("Move Backwards 9 feet", new MoveStraightPositionModeCommand(-9));
		SmartDashboard.putData("DriveStraight 1 second", new DriveStraight());
		
		/**
		 * TOGGLE FIELD ORIENTED DRIVE
		 */
		SmartDashboard.putData("Toggle Field Drive", new ToggleDriveMode());
		SmartDashboard.putBoolean("Field Mode", Robot.driveTrain.fieldMode);
		
		/**
		 * GRABBER
		 */
		SmartDashboard.putData("Close Grabber", new CloseGrabber());
		SmartDashboard.putData("Vent", new CloseSmallGrabber());
		SmartDashboard.putData("Intermediate Open", new IntermediateOpen());
		SmartDashboard.putData("Open Grabber", new OpenGrabber());
		SmartDashboard.putData("Close All Grabbers", new CloseAllGrabbers());
		SmartDashboard.putData("Open Large Grabber", new OpenGrabber());
		SmartDashboard.putData("Close Large Grabber", new CloseGrabber());
		
		/**
		 * ELEVATOR
		 */
		SmartDashboard.putData("Jump to Elevator Position 0", new ElevatorJumpToPosition(0));
		SmartDashboard.putData("Jump to Elevator Position 1", new ElevatorJumpToPosition(1));
		SmartDashboard.putData("Jump to Elevator Position 2", new ElevatorJumpToPosition(2));
		SmartDashboard.putData("Jump to Elevator Position 3", new ElevatorJumpToPosition(3));
		SmartDashboard.putData("Jump to Elevator Position 4", new ElevatorJumpToPosition(4));

		/**
		 * SENSOR OUTPUT
		 */
		LiveWindow.addSensor("Other Sensors", "Accelerometer", RobotMap.accelerometer);
		LiveWindow.addSensor("Drive Train", "Distance Sensor", DriveTrain.distanceSensor);
		LiveWindow.addActuator("Grabber", "Double Solenoid", RobotMap.mommaSolenoid);

		/**
		 * MOTOR SPEED OUTPUT
		 */
		SmartDashboard.putNumber("LeftFront Speed", RobotMap.mecanumDriveControlsLeftFront.getSpeed());
		SmartDashboard.putNumber("LeftRear Speed", RobotMap.mecanumDriveControlsLeftRear.getSpeed());
		SmartDashboard.putNumber("RightFront Speed", RobotMap.mecanumDriveControlsRightFront.getSpeed());
		SmartDashboard.putNumber("RightRear Speed", RobotMap.mecanumDriveControlsRightRear.getSpeed());

		/**
		 * MOTOR POSITION OUTPUT
		 */
		SmartDashboard.putNumber("LeftFront Position", RobotMap.mecanumDriveControlsLeftFront.getEncPosition());
		SmartDashboard.putNumber("LeftRear Position", RobotMap.mecanumDriveControlsLeftRear.getEncPosition());
		SmartDashboard.putNumber("RightFront Position", RobotMap.mecanumDriveControlsRightFront.getEncPosition());
		SmartDashboard.putNumber("RightRear Position", RobotMap.mecanumDriveControlsRightRear.getEncPosition());

		/**
		 * ELEVATOR SPEED OUTPUT
		 */
		SmartDashboard.putNumber("Elevator Speed", RobotMap.elevatorWinchMotor.getSpeed());

		// SmartDashboard.putNumber("Linear Potentiometer height",
		// RobotMap.potentiometer.get());

		/**
		 * CODE VERSION OUTPUT
		 */
		String parsedVersion = VersionFinder.parseVersionFromManifest(this);
		SmartDashboard.putString("Code Version", parsedVersion == null ? "<not found>" : parsedVersion);
	}
}
